
-- what about the partial search
-- we use LIKE AND % (Wild Card)
-- % can represent 0 or more character of any kind
-- _ can represent exactly one character of any kind
/*
    'D%' -- anything that starts with D
            David, Danny, Dog
    '%d' -- anything that ends with d
            Sid, Bid, Kid, Dad
    '%d%' -- anything that contains d
            Aladdin, Cassandra, Adam, Brandon
            Sid, Bid, Kid, Dad
            david, danny, dog

    'D%a' -- anything starts with D and end with a
            Diane, Donna, Damla, Daria

    'S%e%n' -- anything starts with S and has e something in the middle and ends with n
            Steven, Stephen, Selen, Serkan, Sebastian

    'T_' -- starts with T and followed by exactly one character of any kind
            Tj, TD, Ta, T! , TV, T2

    '_a_' -- starts with any one character, followed by a and followed by any one character
            Dad, man, Fat, Cat, Tab, Gap, Map, Mad

 */

select FIRST_NAME from EMPLOYEES
where FIRST_NAME like 'D%a' ; -- 1 row

select FIRST_NAME from EMPLOYEES
where FIRST_NAME like 'S%e%n' ;-- 3 rows

SELECT FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_a_'; -- 1 row

SELECT FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'Da%'; -- 5 rows

select FIRST_NAME from EMPLOYEES
--where FIRST_NAME like 'D%'; -- 9 rows
--where FIRST_NAME like '%d'; -- 6 rows
--where FIRST_NAME like '%d%'; -- 15 rows
where FIRST_NAME like 'T_'; -- 1 row

select PHONE_NUMBER from EMPLOYEES
--where PHONE_NUMBER like '515%' ; -- 21 rows -- starts with 515
where PHONE_NUMBER like '%.121.%' ; -- 8 rows -- contains 121 in the middle

-- YOU CAN OPTIONALLY GIVEN AN ALIAS(NICKNAME) FOR YOUR COLUMN
-- TO CHANGE THE RESULTING COLUMN NAME (ONLY CHANGING DISPLAY NOT ACTUAL DATA VALUE)
-- USING THE KEYWORD "AS" RIGHT AFTER COLUM NAME
-- AND PROVIDE NICKNAME EITHER WITHOUT "" IF SINGLE WORD
-- AND USE "" IF MORE THAN WORD
-- display all first name, salary in employees table
-- modify the column name for salary in result to Money
select FIRST_NAME, SALARY as Money
from EMPLOYEES;

-- display all first name, last name in employees table
-- modify the column name for as below
-- First name --> given name   last name --> family name
SELECT FIRST_NAME AS  GIVEN_NAME, LAST_NAME AS FAMILY_NAME
FROM EMPLOYEES;

-- CONCATENATION IN SQL USE DOUBLE PIPE || (THIS IS NOT OR)
--DISPLAY FIRST NAME, LAST NAME, FULL NAME FOR EMPLOYEE
SELECT FIRST_NAME, LAST_NAME, FIRST_NAME || ' '|| LAST_NAME AS FULL_NAME
FROM EMPLOYEES;

-- ARITHMETIC OPERATOR: + - * /
-- DISPLAY EMPLOYEE NAME AND SALARY
-- AND INCREASED_SALARY AFTER 5000$ RAISE
-- AND DECREASED_SALARY AFTER 2000$ CUT
-- AND YEARLY_SALARY -- * 12
-- AND WEEKLY_SALARY -- / 4
SELECT FIRST_NAME, SALARY,
       SALARY + 5000 AS INCREASED_SALARY,
       SALARY - 2000 AS DECREASED_SALARY,
       SALARY * 12 AS YEARLY_SALARY,
       SALARY / 4 AS WEEKLY_SALARY

FROM EMPLOYEES;

--SQL BUILT-IN FUNCTION:
-- REUSABLE CODE THAT WRAPPED INTO FUNCTION FOR COMMON TASKS
-- LIKE ROUNDING NUMBERS, GETTING LENGTH OF STR AND MORE
-- SINGLE ROW FUNCTION:
    -- IT AFFECT EACH AND EVERY ROW AND RETURN SAME NUMBER OF ROW
    -- FEW TEXT FUNCTION:
    -- UPPER, ACCEPT ONE PARAMETER (COLUMN NAME) AND RETURN UPPERCASE
    -- LOWER, ACCEPT ONE PARAMETER (COLUMN NAME) AND RETURN LOWERCASE
    -- LENGTH: ACCEPT ONE PARAMETER (COLUMN NAME) AND RETURN THE LENGTH OF STRING

    -- DISPLAY FIRST_NAME, AND UPPERCASE FIRSTNAME IN EMPLOYEE TABLE
SELECT FIRST_NAME ,
       UPPER(FIRST_NAME) AS "UPPERCASE_NAME",
       LOWER(FIRST_NAME) AS "LOWERCASE_NAME",
       LENGTH(FIRST_NAME) AS "CHAR_COUNT"
FROM EMPLOYEES;

--FIND OUT FIRST_NAME AND CHARACTER COUNT ONLY DISPLAY IF CHARACTER COUNT IS EXACTLY 5
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS "CHAR_COUNT"
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) = 5; -- 35 ROWS

-- DISPLAY FN IF FN CHARACTER COUNT IS MORE THAN 10
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS "CHAR_COUNT"
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) > 10; -- 2 ROWS
-- DISPLAY FN IF FN CHARACTER COUNT IS BETWEEN 7-9
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS "CHAR_COUNT"
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) BETWEEN 7 AND 9; -- 32 ROWS
-- DISPLAY FN IF FN CHARACTER COUNT IS NOT BETWEEN 5-10
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS "CHAR_COUNT"
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) NOT BETWEEN 5 AND 10; -- 17 ROWS
-- DISPLAY FN IF FN CHARACTER COUNT IS 2 OR 9 OR 11
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS "CHAR_COUNT"
FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) IN (2,9,11);-- 8 ROWS

-- FIND OUT ALL FIRST_NAME THAT CONTAINS d OR D
SELECT  FIRST_NAME
FROM EMPLOYEES
--WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%d%'; -- 20 ROWS
--WHERE LOWER(FIRST_NAME) LIKE '%d%'; -- 20 ROWS
WHERE UPPER(FIRST_NAME) LIKE '%D%'; -- 20 ROWS

--YOU CAN USE SINGLE ROW ANYWHERE
--Including in select column list, condition, order by
SELECT FIRST_NAME
FROM EMPLOYEES
ORDER BY lENGTH(FIRST_NAME) DESC;

-- NUMBER FUNCTIONS:
-- ROUND (DECIMAL NUMBER HERE) --> ROUNDER NUMBER
-- ROUND (DECIMAL NUMBER HERE, DIGIT YOU WANNA KEEP) --> ROUNDED NUMBER WITH DESIRED DIGIT

-- FIND OUT SALARY AND DAILY SALARY OF EMPLOYEES
SELECT SALARY,
        ROUND(SALARY/30), -- ROUND UP THE DECIMAL NUMBER
        ROUND(SALARY/30, 2) -- ROUND UP THE DECIMAL NUMBER WITH 2 DIGITS
FROM EMPLOYEES;

-- MULTI ROW FUNCTION | GROUP FUNCTIONS | AGGREGATE FUNCTIONS
-- COUNT, MAX, MIN, SUM, AVG
-- YOU CAN USE COUNT FUNCTION EITHER WITH * OR COLUMN NAME
-- WHEN USED WITH * IT WILL JUST RETURN THE ROW COUNT
-- WHEN USED WITH COLUMN NAME IT WILL RETURN NON-NULL ROW COUNT ONLY
SELECT COUNT(*), COUNT(FIRST_NAME), COUNT(LAST_NAME),
       COUNT(COMMISSION_PCT) -- we have only 35 employees with commission_pct value not null
FROM EMPLOYEES ;

-- get the employee count for employees with department_id 90
select count(*)
from EMPLOYEES
where DEPARTMENT_ID = 90;

--MAX
-- find out the max salary in employees table
select MAX(SALARY)
from EMPLOYEES ; --24000

-- find out the max salary in employees table
-- exclude the salary 24000
select MAX(SALARY)
from EMPLOYEES
where SALARY <> 24000; -- 17000

-- MIN
-- find out minimum salary in employees table
SELECT min(SALARY)
from EMPLOYEES; -- 2100
--exclude the salary 2100
SELECT min(SALARY)
from EMPLOYEES
where SALARY <>2100; -- 2200

--SUM
-- get the sum of entire employees salary
select SUM(SALARY)
from EMPLOYEES ; -- 691416

-- get the sum of salary of department id 90
select SUM(SALARY)
from EMPLOYEES
Where DEPARTMENT_ID = 90; --58000

--AVG
-- Find out average salary for all employees
SELECT AVG(SALARY), Round(AVG(SALARY))
from EMPLOYEES ; --6461.831775700934579439252336448598130841

--ALL IN ONE SHOT
SELECT COUNT(*) AS "EMPLOYEE_COUNT",
       MAX(SALARY) AS "HIGHEST_SALARY",
       MIN(SALARY) AS "LOWEST_SALARY",
       SUM(SALARY) AS "SUM OF ALL SALARY",
       ROUND(AVG(SALARY)) AS "AVERAGE SALARY"
FROM EMPLOYEES;

-- Group by
-- CAN BE USED ALONG WITH MULTI-ROW(AGGREGATE, GROUP) FUNCTIONS
-- TO GENERATE PER GROUP INSTEAD OF WHOLE TABLE
-- IT CAN ONLY BE USED ALONG WITH MULTI-ROW FUCNTIONS
-- CAN NOT BE USED BY ITSELF
SELECT MAX(SALARY)
FROM EMPLOYEES;

-- DISPLAY COUNT OF EMPLOYEES IN EACH DEPARTMENT
SELECT DEPARTMENT_ID,
       COUNT(*) AS "DEP_EMP_COUNT"
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID; -- 12 ROWS

-- DISPLAY COUNT OF EMPLOYEES IN EACH JOB_ID
SELECT JOB_ID, COUNT(*) AS "JOB_ID_COUNT"
FROM EMPLOYEES
GROUP BY JOB_ID; -- 19

--DISPLAY THE MAX SALARY FOR EACH DEPARTMENT
--DISPLAY THE AVG SALARY FOR EACH DEPARTMENT
--DISPLAY THE SUM SALARY FOR EACH DEPARTMENT
--DISPLAY THE MIN SALARY FOR EACH DEPARTMENT
SELECT DEPARTMENT_ID,
       MAX(SALARY) AS "MAX_SALARY",
       ROUND(AVG(SALARY), 2) AS "AVERAGE_SALARY",
       SUM(SALARY) AS "SUM_OF_SALARY",
       MIN(SALARY) AS "MIN_SALARY"
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;


--DISPLAY THE MAX SALARY FOR EACH JOB_ID
--DISPLAY THE AVG SALARY FOR EACH JOB_ID
--DISPLAY THE SUM SALARY FOR EACH JOB_ID
--DISPLAY THE MIN SALARY FOR EACH JOB_ID
SELECT JOB_ID,
       MAX(SALARY) AS "HIGHEST_SALARY",
       ROUND(AVG(SALARY), 2) AS "AVERAGE_SALARY",
       SUM(SALARY) AS "SUM_OF_SALARY",
       MIN(SALARY) AS "LOWEST_SALARY"
FROM EMPLOYEES
GROUP BY JOB_ID;

--USING COUNTRY
-- DISPLAY COUNT OF COUNTRIES IN EACH REGION
SELECT REGION_ID, COUNT(*) AS "COUNT_OF_COUNTRIES"
FROM COUNTRIES
GROUP BY REGION_ID;

--HAVING
-- CAN BE USED AFTER GROUP B TO FILTER
-- ALREADY COMBINED RESULT FURTHER MORE
-- YOU CAN ONLY USE HAVING IF YOU ARE USING AGGREGATE FUNCTIONS IN CONDITION AFTER GROUP BY
-- FOR EXAMPLE IF COUNT OF EMPLOYEES IN EACH DEPARTMENT MORE THAN 10
-- HAVING COUNT(*) > 10 WORKS, WHERE COUNT(*) WILL NEVER WORK

--DISPLAY count OF EMPLOYEES IN EACH DEPARTMENT
-- ONLY DISPLAY IF THE COUNT OF EMPLOYEES ARE MORE THAN 10
SELECT DEPARTMENT_ID,
       COUNT(*) AS "DEP_EMP_COUNT"
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) > 10;

-- DISPLAY MAX SALARY IN EACH DEPARTMENT
-- ONLY DISPLAY IF THE DEPARTMENT MAX SALARY IS MORE THAN 10000
SELECT DEPARTMENT_ID,
       MAX(SALARY) AS "HIGHEST_SALARY"
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY) > 10000;

--- DISPLAY MAX SALARY IN EACH DEPARTMENT
-- ONLY DISPLAY IF DEPARTMENT_ID IS NOT 100
SELECT DEPARTMENT_ID,
       MAX(SALARY) AS "HIGHEST_SALARY"
FROM EMPLOYEES
WHERE DEPARTMENT_ID != 100
GROUP BY DEPARTMENT_ID
--HAVING  DEPARTMENT_ID <> 100 ;

















